autocmd!

set nocompatible

set makeprg=./waf

execute pathogen#infect()
execute pathogen#helptags()
filetype plugin indent on

set exrc
set secure
set encoding=utf-8 nobomb

set modeline
set modelines=4

set t_ti= t_te=

let $PAGER=''

" Whitespace
set ts=4
set sw=4
set autoindent
set smartindent
set smarttab

set backspace=indent,eol,start

" Set the invisble characters and hide them
set listchars=tab:▸\ ,trail:·,eol:¬,nbsp:_,extends:❯,precedes:❮
set nolist

" Don't reset to start of line
set nostartofline

set cursorline
set scrolloff=5
set showtabline=2
set cmdheight=2
set title
set t_Co=256
set background=dark
syntax on
set noerrorbells
set shortmess=atI
set number
set nowrap

set hlsearch
set incsearch
set ignorecase
set smartcase

set hidden
set switchbuf=useopen
set autoread

set winwidth=80

set splitbelow splitright

set clipboard=unnamed

set nobackup
set nowritebackup

set updatecount=0

set ttyfast
set notimeout
set ttimeout
set ttimeoutlen=100

syntax sync minlines=256

set synmaxcol=256

set showmatch
set ruler
set showcmd
set laststatus=2

set shell=bash
let g:is_bash=1

set history=100

" Wildmode
set wildmenu
set wildmode=full

" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,.hg,*.rbc,*.rbo,*.class,.svn,*.gem
" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
" Ignore rails temporary asset caches
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*
" Ignore node modules
set wildignore+=node_modules/*
" Disable temp and backup files
set wildignore+=*.sw*,*~,._*

syntax on

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMixed'

colorscheme zendnb
" gui
if has('gui_running')
	set guicursor+=a:blinkon0
	set vb t_vb=

	colorscheme anokha

	set guifont=Ubuntu\ Mono\ Bold:h15
endif

noremap <F4> :A<CR>
noremap <F5> :AV <CR>
noremap <F7> :set spell!<CR>
noremap <F8> :TlistToggle<CR>

" File Buffers
au BufEnter * set complete-=i
au BufEnter *.[ch][p]* set comments=s1:/*,mb:*,ex:*/,:///,://,b:#,:%,:XCOMM,n:>,fb:-

au BufRead,BufNewFile *.m3 set ft=m3
au BufRead,BufNewFile wscript set ft=python
au BufRead,BufNewFile *.asc set ft=asciidoc
au BufRead,BufNewFile *.xml set ft=xml
au BufRead,BufNewFile *.cls set ft=tex

"Whitespace
highlight ExtraWhitespace ctermbg=DarkRed guibg=DarkRed
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

au FileType python set omnifunc=pythoncomplete#Complete

let comment_toggle=0
function! ToggleComments()
let k_fg = synIDattr(synIDtrans(hlID("Comment")), "fg")
let k_bg = synIDattr(synIDtrans(hlID("Normal")), "bg")
echo k_fg
echo k_bg
if k_fg != k_bg
	execute "highlight Comment guifg=" k_bg
endif
endfunction

"Omni
" " build tags of your own project with Ctrl-F12
map <C-F12> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q
" " OmniCppComplete
"let OmniCpp_NamespaceSearch = 1
"let OmniCpp_GlobalScopeSearch = 1
"let OmniCpp_ShowAccess = 1
"let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
"let OmniCpp_MayCompleteDot = 1 " autocomplete after .
"let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
"let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
"let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview
set omnifunc=syntaxcomplete#Complete

function! FancySearch()
	let search = input("Enter search string: ")
	execute("vim \"".search."\" % | cw")
endfunction

function! FixFunc()
python << EOF
import vim
import re
vim.command("let l:curline = getline(\".\")")
curline = vim.eval("l:curline")
m = re.match("(.*\()(.*\))(.*)$", curline)

if m:
	func_name = m.group(1)
	args = m.group(2)
	extra = m.group(3)

	args = args.split(',')
	args[-1] = args[-1] + extra
	print args
	num_lines = 1 + len(args)
	print num_lines
	newline = "\n".join([func_name, ",\n".join(args)])
	print newline
	vim.command('let @"="' + newline + '"')
	vim.command("normal V\"\"pV" + str(num_lines) + "j=")
EOF
endfunction


" Tag files
set tags+=~/.vim/tags/cpp
set tags+=~/.vim/tags/boost
set tags+=~/.vim/tags/qt4
set tags+=~/.vim/tags/python
set tags+=tags
set path+=src

noremap <leader>n :cnext<cr>
noremap <leader>b :Make install<cr>
noremap <leader>a :let @a=expand("%:.")<cr>
noremap <leader>c :cclose <cr>
noremap <leader>l :lopen <cr>

au BufEnter *.machine :set filetype=yaml
au BufEnter *.machine :set sw=2
au BufEnter *.machine :set expandtab

"let &colorcolumn=join(range(100,999),",")
"highlight ColorColumn ctermbg=234

set shell=bash\ --login


